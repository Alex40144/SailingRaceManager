generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Users {
  displayName String
  id          String  @id @unique @default(uuid())
  username    String  @unique
  password    String
  settings    Json
  club        Club    @relation(fields: [clubId], references: [id])
  clubId      String
  permLvl     Int
  uuid        String? @unique

  @@index([clubId])
}

model Boats {
  id               String   @id @unique @default(uuid())
  name             String
  crew             Int
  py               Int
  pursuitStartTime Int
  club             Club     @relation(fields: [clubId], references: [id])
  clubId           String
  results          Result[]

  @@index([clubId])
}

model Club {
  id       String   @id @unique @default(uuid())
  name     String   @unique
  settings Json
  series   Series[]
  boats    Boats[]
  users    Users[]
}

model Series {
  id       String  @id @unique @default(uuid())
  name     String
  club     Club    @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId   String
  settings Json
  races    Race[]
  fleets   Fleet[]

  @@index([clubId])
}

model Race {
  id       String   @id @unique @default(uuid())
  number   Int
  Time     String
  OOD      String
  AOD      String
  SO       String
  ASO      String
  results  Result[]
  Type     String
  series   Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  seriesId String

  @@index([seriesId])
}

model Fleet {
  id        String   @id @unique @default(uuid())
  series    Series   @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  name      String
  seriesId  String
  startTime Int
  results   Result[]

  @@index([seriesId])
}

model Result {
  id              String  @id @unique @default(uuid())
  fleet           Fleet   @relation(fields: [fleetId], references: [id], onDelete: Cascade)
  fleetId         String
  race            Race    @relation(fields: [raceId], references: [id], onDelete: Cascade)
  raceId          String
  Helm            String
  Crew            String
  boat            Boats?  @relation(fields: [boatId], references: [id])
  boatId          String?
  SailNumber      String
  finishTime      Int
  laps            Lap[]
  CorrectedTime   Float
  PursuitPosition Int
  isDeleted       Boolean

  @@index([fleetId])
  @@index([boatId])
  @@index([raceId])
}

model Lap {
  id       String @id @unique @default(uuid())
  result   Result @relation(fields: [resultId], references: [id], onDelete: Cascade)
  resultId String
  time     Int

  @@index([resultId])
}
